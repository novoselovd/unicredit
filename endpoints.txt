1) UserRegistration. URL: /registration. Usage: POST-запрос, в котором содержатся поля username, password, email,
name, surname. Создаётся сущность пользователя, в случае успеха добавления в БД возвращается сообщение об успехе,
access_token и refresh_token. Иначе выводится сообщение об ошибке и статус 500
2) UserLogin. URL: /login. Usage: POST-запрос, в котором содержится username и password. В случае корректности данных
возвращается сообщение об успехе и пара токенов, иначе -- сообщение об ошибке и статус 400.
3) UserLogoutAccess. URL: /logout/access. Требуется access_token, метод  POST.В случае успеха access token
становится устаревшим,
возвращается сообщение об успехе. Иначе — статус 500.
4) UserLogoutRefresh. URL: /logout/refresh. Аналогично с access_token. 
5) TokenRefresh. URL: /token/refresh. Требуется refresh_token, метод POST. В случае успеха возвращается
обновлённый access_token и статус 200.
6) AllUsers. URL: /users. Требуется access_token. Метод get возвращает список всех пользователей.
Метод delete удаляет всех пользователей.
7) SecretResource. URL: /secret. Требуется access_token. Метод get возвращает "answer" : 42.
Требуется для проверки корректности работы токенов.
8) UserChangePassword. URL: /password/change. Требуется access_token. Usage: POST-запрос, 
в котором содержится нынешний пароль и новый пароль. В случае корректных данных пароль
меняется на новый, возвращается сообщение об успехе и статус 400.
9) UserForgotPassword. URL: /password/forgot. Usage: POST-запрос с email-адресом. На этот адрес высылается письмо с инструкциями к смене пароля.
10) UserResetPasswordViaEmail. URL: /password/forgot/reset/<token>. Usage: POST-запрос с новым паролем. Токен декодируется,
в случае успеха по нему определяется пользователь, запросивший смену пароля, пароль меняется на новый, выдаётся пара токенов.
11) UserFindById. URL: /user/<id>. Usage: ищется пользователь по заданному в адресе id. 
12) Transaction. URL: /transaction. Usage: POST-запрос, в котором содержатся поля receiver_username и amount.
Введённые данные проверяются на корректность (получатель != отправитель, количество > 0,
достаточное количество средств на счету), после чего в случае успеха создаётся сущность транзакции,
она добавляется в БД, а баланс у обоих пользователей меняется. 
13) AllTransactions. URL: /alltransactions. Требуется access token.
Usage: GET-запрос, возвращающий список всех транзакций.
14) FindTransferById. URL: /transfers. Требуется access token. (в будущем поменяем на /transfers/<id>).
Usage: POST-запрос, в котором содержится id пользователя. Возвращаются все транзакции с участием этого пользователя.
15) UserGetSupport. URL: /support. Требуется access token. Usage: POST-запрос, в котором содержится тело обращения в тех. поддержку. Посылается письмо на адрес slidecurrence@gmail.com, в котором содержится информация о пользователе (id, username, email), извлеченная из токена, и непосредственно обращение в техподдержку.
16) ItemsInShop. URL: /shop. Требуется access-token. Usage: по GET-запросу выдаётся список всех товаров, находящихся в магазине в данный момент
17) AddItemToShop. URL: /shop/additem. Требуется access-token (пока что любой, после введения ролей будет только для админов). Usage: POST-запрос, в котором поля "name", "description" и "price", соответственно название, описание и цена добавляемого товара. 
18) BuyItem. URL: /shop/buy. Требуется access-token. Usage: POST-запрос, в котором передаётся значение поля "id" — id товара.
В случае успеха (достаточное количество средств и тп) товар будет приобретён и закреплён за владельцем токена, с его счёта
будет списана стоимость товара. 
19) GetOwnPurchases. URL: /mypurchases. Требуется access-token. Usage: GET-запрос. Ответом является список товаров, 
приобретённых владельцем токена. 
20) GetItemById. URL: /items/<item_id>. Usage: по GET-запросу выдаётся товар, имеющий айди, равный item_id. 
21) AddMoney. URL: /addmoney. Требуется access-token. Usage: POST-запрос, в теле запроса id пользователя и amount (>=0). Баланс пользователя увеличивается на amount денежных единиц.
22) UserDelete. URL: /deleteuser. Требуется access-token. Usage: DELETE-запрос, в теле которого id пользователя. После запроса пользователь будет удалён из БД.
23) ItemDelete. URL: /deleteitem. Требуется access-token. Usage: DELETE-запрос, в теле которого id айтема. После запроса айтем будет удалён из БД.
